/**
 * This is an autogenerated file created by the Stencil build process.
 * It contains typing information for all components that exist in this project
 * and imports for stencil collections that might be configured in your stencil.config.js file
 */

import '@stencil/core';

declare global {
  namespace JSX {
    interface Element {}
    export interface IntrinsicElements {}
  }
  namespace JSXElements {}

  interface HTMLStencilElement extends HTMLElement {
    componentOnReady(): Promise<this>;
    componentOnReady(done: (ele?: this) => void): void;

    forceUpdate(): void;
  }

  interface HTMLAttributes {}
}

import 'ionicons';
import '@ionic/core';

import {
  GLDrawOptions,
} from './components/gl-draw-controller/gl-draw-controller';
import {
  Element,
} from '@stencil/core';

declare global {

  namespace StencilComponents {
    interface GlApp {
      'basemap': boolean;
      'featureAdd': boolean;
      'featureEdit': boolean;
      'fullscreen': boolean;
      'legend': boolean;
      'mapTitle': string;
      'popup': boolean;
    }
  }

  interface HTMLGlAppElement extends StencilComponents.GlApp, HTMLStencilElement {}

  var HTMLGlAppElement: {
    prototype: HTMLGlAppElement;
    new (): HTMLGlAppElement;
  };
  interface HTMLElementTagNameMap {
    'gl-app': HTMLGlAppElement;
  }
  interface ElementTagNameMap {
    'gl-app': HTMLGlAppElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'gl-app': JSXElements.GlAppAttributes;
    }
  }
  namespace JSXElements {
    export interface GlAppAttributes extends HTMLAttributes {
      'basemap'?: boolean;
      'featureAdd'?: boolean;
      'featureEdit'?: boolean;
      'fullscreen'?: boolean;
      'legend'?: boolean;
      'mapTitle'?: string;
      'popup'?: boolean;
    }
  }
}


declare global {

  namespace StencilComponents {
    interface GlAttributesController {
      'confirmComponent': string;
      'formComponent': string;
    }
  }

  interface HTMLGlAttributesControllerElement extends StencilComponents.GlAttributesController, HTMLStencilElement {}

  var HTMLGlAttributesControllerElement: {
    prototype: HTMLGlAttributesControllerElement;
    new (): HTMLGlAttributesControllerElement;
  };
  interface HTMLElementTagNameMap {
    'gl-attributes-controller': HTMLGlAttributesControllerElement;
  }
  interface ElementTagNameMap {
    'gl-attributes-controller': HTMLGlAttributesControllerElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'gl-attributes-controller': JSXElements.GlAttributesControllerAttributes;
    }
  }
  namespace JSXElements {
    export interface GlAttributesControllerAttributes extends HTMLAttributes {
      'confirmComponent'?: string;
      'formComponent'?: string;
    }
  }
}


declare global {

  namespace StencilComponents {
    interface GlAttributesForm {
      'behavior': any;
      'cancelText': any;
      'feature': any;
      'heading': string;
      'submitText': any;
    }
  }

  interface HTMLGlAttributesFormElement extends StencilComponents.GlAttributesForm, HTMLStencilElement {}

  var HTMLGlAttributesFormElement: {
    prototype: HTMLGlAttributesFormElement;
    new (): HTMLGlAttributesFormElement;
  };
  interface HTMLElementTagNameMap {
    'gl-attributes-form': HTMLGlAttributesFormElement;
  }
  interface ElementTagNameMap {
    'gl-attributes-form': HTMLGlAttributesFormElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'gl-attributes-form': JSXElements.GlAttributesFormAttributes;
    }
  }
  namespace JSXElements {
    export interface GlAttributesFormAttributes extends HTMLAttributes {
      'behavior'?: any;
      'cancelText'?: any;
      'feature'?: any;
      'heading'?: string;
      'submitText'?: any;
    }
  }
}


declare global {

  namespace StencilComponents {
    interface GlBasemapSwitcher {

    }
  }

  interface HTMLGlBasemapSwitcherElement extends StencilComponents.GlBasemapSwitcher, HTMLStencilElement {}

  var HTMLGlBasemapSwitcherElement: {
    prototype: HTMLGlBasemapSwitcherElement;
    new (): HTMLGlBasemapSwitcherElement;
  };
  interface HTMLElementTagNameMap {
    'gl-basemap-switcher': HTMLGlBasemapSwitcherElement;
  }
  interface ElementTagNameMap {
    'gl-basemap-switcher': HTMLGlBasemapSwitcherElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'gl-basemap-switcher': JSXElements.GlBasemapSwitcherAttributes;
    }
  }
  namespace JSXElements {
    export interface GlBasemapSwitcherAttributes extends HTMLAttributes {

    }
  }
}


declare global {

  namespace StencilComponents {
    interface GlBasemaps {

    }
  }

  interface HTMLGlBasemapsElement extends StencilComponents.GlBasemaps, HTMLStencilElement {}

  var HTMLGlBasemapsElement: {
    prototype: HTMLGlBasemapsElement;
    new (): HTMLGlBasemapsElement;
  };
  interface HTMLElementTagNameMap {
    'gl-basemaps': HTMLGlBasemapsElement;
  }
  interface ElementTagNameMap {
    'gl-basemaps': HTMLGlBasemapsElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'gl-basemaps': JSXElements.GlBasemapsAttributes;
    }
  }
  namespace JSXElements {
    export interface GlBasemapsAttributes extends HTMLAttributes {

    }
  }
}


declare global {

  namespace StencilComponents {
    interface GlDrawController {
      'enter': (options?: GLDrawOptions, behavior?: any) => Promise<void>;
      'exit': () => Promise<void>;
      'getAll': () => any;
      'getBehavior': () => any;
    }
  }

  interface HTMLGlDrawControllerElement extends StencilComponents.GlDrawController, HTMLStencilElement {}

  var HTMLGlDrawControllerElement: {
    prototype: HTMLGlDrawControllerElement;
    new (): HTMLGlDrawControllerElement;
  };
  interface HTMLElementTagNameMap {
    'gl-draw-controller': HTMLGlDrawControllerElement;
  }
  interface ElementTagNameMap {
    'gl-draw-controller': HTMLGlDrawControllerElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'gl-draw-controller': JSXElements.GlDrawControllerAttributes;
    }
  }
  namespace JSXElements {
    export interface GlDrawControllerAttributes extends HTMLAttributes {
      'onDrawCreate'?: (event: CustomEvent) => void;
      'onDrawDelete'?: (event: CustomEvent) => void;
      'onDrawEnter'?: (event: CustomEvent) => void;
      'onDrawExit'?: (event: CustomEvent) => void;
    }
  }
}


declare global {

  namespace StencilComponents {
    interface GlDrawToolbar {
      'cancelText': any;
      'color': string;
      'confirmText': any;
      'label': any;
    }
  }

  interface HTMLGlDrawToolbarElement extends StencilComponents.GlDrawToolbar, HTMLStencilElement {}

  var HTMLGlDrawToolbarElement: {
    prototype: HTMLGlDrawToolbarElement;
    new (): HTMLGlDrawToolbarElement;
  };
  interface HTMLElementTagNameMap {
    'gl-draw-toolbar': HTMLGlDrawToolbarElement;
  }
  interface ElementTagNameMap {
    'gl-draw-toolbar': HTMLGlDrawToolbarElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'gl-draw-toolbar': JSXElements.GlDrawToolbarAttributes;
    }
  }
  namespace JSXElements {
    export interface GlDrawToolbarAttributes extends HTMLAttributes {
      'cancelText'?: any;
      'color'?: string;
      'confirmText'?: any;
      'label'?: any;
      'onDrawCancel'?: (event: CustomEvent) => void;
      'onDrawConfirm'?: (event: CustomEvent) => void;
    }
  }
}


declare global {

  namespace StencilComponents {
    interface GlFeatureAdd {
      'horizontal': 'left' | 'center' | 'right';
      'icon': string;
      'vertical': 'bottom' | 'center' | 'top';
    }
  }

  interface HTMLGlFeatureAddElement extends StencilComponents.GlFeatureAdd, HTMLStencilElement {}

  var HTMLGlFeatureAddElement: {
    prototype: HTMLGlFeatureAddElement;
    new (): HTMLGlFeatureAddElement;
  };
  interface HTMLElementTagNameMap {
    'gl-feature-add': HTMLGlFeatureAddElement;
  }
  interface ElementTagNameMap {
    'gl-feature-add': HTMLGlFeatureAddElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'gl-feature-add': JSXElements.GlFeatureAddAttributes;
    }
  }
  namespace JSXElements {
    export interface GlFeatureAddAttributes extends HTMLAttributes {
      'horizontal'?: 'left' | 'center' | 'right';
      'icon'?: string;
      'vertical'?: 'bottom' | 'center' | 'top';
    }
  }
}


declare global {

  namespace StencilComponents {
    interface GlFormFacets {
      'facets': any[];
    }
  }

  interface HTMLGlFormFacetsElement extends StencilComponents.GlFormFacets, HTMLStencilElement {}

  var HTMLGlFormFacetsElement: {
    prototype: HTMLGlFormFacetsElement;
    new (): HTMLGlFormFacetsElement;
  };
  interface HTMLElementTagNameMap {
    'gl-form-facets': HTMLGlFormFacetsElement;
  }
  interface ElementTagNameMap {
    'gl-form-facets': HTMLGlFormFacetsElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'gl-form-facets': JSXElements.GlFormFacetsAttributes;
    }
  }
  namespace JSXElements {
    export interface GlFormFacetsAttributes extends HTMLAttributes {
      'facets'?: any[];
    }
  }
}


declare global {

  namespace StencilComponents {
    interface GlFormFields {
      'facet': string;
      'getValidationMessages': () => any[];
      'getValues': () => any[];
      'isValid': () => boolean;
    }
  }

  interface HTMLGlFormFieldsElement extends StencilComponents.GlFormFields, HTMLStencilElement {}

  var HTMLGlFormFieldsElement: {
    prototype: HTMLGlFormFieldsElement;
    new (): HTMLGlFormFieldsElement;
  };
  interface HTMLElementTagNameMap {
    'gl-form-fields': HTMLGlFormFieldsElement;
  }
  interface ElementTagNameMap {
    'gl-form-fields': HTMLGlFormFieldsElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'gl-form-fields': JSXElements.GlFormFieldsAttributes;
    }
  }
  namespace JSXElements {
    export interface GlFormFieldsAttributes extends HTMLAttributes {
      'facet'?: string;
      'onFieldValueChanged'?: (event: CustomEvent) => void;
    }
  }
}


declare global {

  namespace StencilComponents {
    interface GlForm {
      'facets': any[];
      'fields': any[];
    }
  }

  interface HTMLGlFormElement extends StencilComponents.GlForm, HTMLStencilElement {}

  var HTMLGlFormElement: {
    prototype: HTMLGlFormElement;
    new (): HTMLGlFormElement;
  };
  interface HTMLElementTagNameMap {
    'gl-form': HTMLGlFormElement;
  }
  interface ElementTagNameMap {
    'gl-form': HTMLGlFormElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'gl-form': JSXElements.GlFormAttributes;
    }
  }
  namespace JSXElements {
    export interface GlFormAttributes extends HTMLAttributes {
      'facets'?: any[];
      'fields'?: any[];
    }
  }
}


declare global {

  namespace StencilComponents {
    interface GlFullscreen {

    }
  }

  interface HTMLGlFullscreenElement extends StencilComponents.GlFullscreen, HTMLStencilElement {}

  var HTMLGlFullscreenElement: {
    prototype: HTMLGlFullscreenElement;
    new (): HTMLGlFullscreenElement;
  };
  interface HTMLElementTagNameMap {
    'gl-fullscreen': HTMLGlFullscreenElement;
  }
  interface ElementTagNameMap {
    'gl-fullscreen': HTMLGlFullscreenElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'gl-fullscreen': JSXElements.GlFullscreenAttributes;
    }
  }
  namespace JSXElements {
    export interface GlFullscreenAttributes extends HTMLAttributes {

    }
  }
}


declare global {

  namespace StencilComponents {
    interface GlLegendItem {
      'image': string;
      'itemType': string;
      'layers': Array<string>;
      'text': string;
      'visible': boolean;
    }
  }

  interface HTMLGlLegendItemElement extends StencilComponents.GlLegendItem, HTMLStencilElement {}

  var HTMLGlLegendItemElement: {
    prototype: HTMLGlLegendItemElement;
    new (): HTMLGlLegendItemElement;
  };
  interface HTMLElementTagNameMap {
    'gl-legend-item': HTMLGlLegendItemElement;
  }
  interface ElementTagNameMap {
    'gl-legend-item': HTMLGlLegendItemElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'gl-legend-item': JSXElements.GlLegendItemAttributes;
    }
  }
  namespace JSXElements {
    export interface GlLegendItemAttributes extends HTMLAttributes {
      'image'?: string;
      'itemType'?: string;
      'layers'?: Array<string>;
      'text'?: string;
      'visible'?: boolean;
    }
  }
}


declare global {

  namespace StencilComponents {
    interface GlLegend {

    }
  }

  interface HTMLGlLegendElement extends StencilComponents.GlLegend, HTMLStencilElement {}

  var HTMLGlLegendElement: {
    prototype: HTMLGlLegendElement;
    new (): HTMLGlLegendElement;
  };
  interface HTMLElementTagNameMap {
    'gl-legend': HTMLGlLegendElement;
  }
  interface ElementTagNameMap {
    'gl-legend': HTMLGlLegendElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'gl-legend': JSXElements.GlLegendAttributes;
    }
  }
  namespace JSXElements {
    export interface GlLegendAttributes extends HTMLAttributes {

    }
  }
}


declare global {

  namespace StencilComponents {
    interface GlMap {
      'getMap': () => Promise<any>;
      'getStyle': () => Promise<{ version: number; sources: {}; layers: any[]; }>;
      'getStyleElementById': (id: string) => Element;
      'latitude': number;
      'longitude': number;
      'mapReady': () => Promise<void>;
      'maxzoom': number;
      'minzoom': number;
      'off': (eventName: string, layerName: string, handler: Function) => Promise<void>;
      'on': (eventName: string, layerName: string, handler: Function) => Promise<void>;
      'resizeMap': () => void;
      'setCursor': (cursor: string) => Promise<void>;
      'setLayoutProperty': (layerName: string, propName: string, propValue: any) => Promise<void>;
      'zoom': number;
    }
  }

  interface HTMLGlMapElement extends StencilComponents.GlMap, HTMLStencilElement {}

  var HTMLGlMapElement: {
    prototype: HTMLGlMapElement;
    new (): HTMLGlMapElement;
  };
  interface HTMLElementTagNameMap {
    'gl-map': HTMLGlMapElement;
  }
  interface ElementTagNameMap {
    'gl-map': HTMLGlMapElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'gl-map': JSXElements.GlMapAttributes;
    }
  }
  namespace JSXElements {
    export interface GlMapAttributes extends HTMLAttributes {
      'latitude'?: number;
      'longitude'?: number;
      'maxzoom'?: number;
      'minzoom'?: number;
      'onStyleUpdated'?: (event: CustomEvent) => void;
      'zoom'?: number;
    }
  }
}


declare global {

  namespace StencilComponents {
    interface GlPopupController {

    }
  }

  interface HTMLGlPopupControllerElement extends StencilComponents.GlPopupController, HTMLStencilElement {}

  var HTMLGlPopupControllerElement: {
    prototype: HTMLGlPopupControllerElement;
    new (): HTMLGlPopupControllerElement;
  };
  interface HTMLElementTagNameMap {
    'gl-popup-controller': HTMLGlPopupControllerElement;
  }
  interface ElementTagNameMap {
    'gl-popup-controller': HTMLGlPopupControllerElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'gl-popup-controller': JSXElements.GlPopupControllerAttributes;
    }
  }
  namespace JSXElements {
    export interface GlPopupControllerAttributes extends HTMLAttributes {
      'onOpenPopup'?: (event: CustomEvent) => void;
    }
  }
}


declare global {

  namespace StencilComponents {
    interface GlPopup {
      'closeKey': number;
      'isOpen': () => any;
      'removePopup': () => void;
    }
  }

  interface HTMLGlPopupElement extends StencilComponents.GlPopup, HTMLStencilElement {}

  var HTMLGlPopupElement: {
    prototype: HTMLGlPopupElement;
    new (): HTMLGlPopupElement;
  };
  interface HTMLElementTagNameMap {
    'gl-popup': HTMLGlPopupElement;
  }
  interface ElementTagNameMap {
    'gl-popup': HTMLGlPopupElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'gl-popup': JSXElements.GlPopupAttributes;
    }
  }
  namespace JSXElements {
    export interface GlPopupAttributes extends HTMLAttributes {
      'closeKey'?: number;
    }
  }
}


declare global {

  namespace StencilComponents {
    interface GlRemoteController {
      'send': (behavior: any, feature: any) => void;
    }
  }

  interface HTMLGlRemoteControllerElement extends StencilComponents.GlRemoteController, HTMLStencilElement {}

  var HTMLGlRemoteControllerElement: {
    prototype: HTMLGlRemoteControllerElement;
    new (): HTMLGlRemoteControllerElement;
  };
  interface HTMLElementTagNameMap {
    'gl-remote-controller': HTMLGlRemoteControllerElement;
  }
  interface ElementTagNameMap {
    'gl-remote-controller': HTMLGlRemoteControllerElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'gl-remote-controller': JSXElements.GlRemoteControllerAttributes;
    }
  }
  namespace JSXElements {
    export interface GlRemoteControllerAttributes extends HTMLAttributes {

    }
  }
}


declare global {

  namespace StencilComponents {
    interface GlStyle {
      'basemap': boolean;
      'enabled': boolean;
      'getJSON': () => Promise<any>;
      'id': string;
      'name': string;
      'setJSON': (json: any) => void;
      'thumbnail': string;
      'url': string;
    }
  }

  interface HTMLGlStyleElement extends StencilComponents.GlStyle, HTMLStencilElement {}

  var HTMLGlStyleElement: {
    prototype: HTMLGlStyleElement;
    new (): HTMLGlStyleElement;
  };
  interface HTMLElementTagNameMap {
    'gl-style': HTMLGlStyleElement;
  }
  interface ElementTagNameMap {
    'gl-style': HTMLGlStyleElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'gl-style': JSXElements.GlStyleAttributes;
    }
  }
  namespace JSXElements {
    export interface GlStyleAttributes extends HTMLAttributes {
      'basemap'?: boolean;
      'enabled'?: boolean;
      'id'?: string;
      'name'?: string;
      'onStyleElementAdded'?: (event: CustomEvent) => void;
      'onStyleElementModified'?: (event: CustomEvent) => void;
      'onStyleElementRemoved'?: (event: CustomEvent) => void;
      'thumbnail'?: string;
      'url'?: string;
    }
  }
}

declare global { namespace JSX { interface StencilJSX {} } }
