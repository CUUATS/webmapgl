/**
 * This is an autogenerated file created by the Stencil build process.
 * It contains typing information for all components that exist in this project
 * and imports for stencil collections that might be configured in your stencil.config.js file
 */


declare global {
  interface HTMLStencilElement extends HTMLElement {
    componentOnReady(): Promise<this>;
    componentOnReady(done: (ele?: this) => void): void;
  }
}



import {
  GLLegend as GlLegend
} from './components/gl-legend/gl-legend';

declare global {
  interface HTMLGlLegendElement extends GlLegend, HTMLStencilElement {
  }
  var HTMLGlLegendElement: {
    prototype: HTMLGlLegendElement;
    new (): HTMLGlLegendElement;
  };
  interface HTMLElementTagNameMap {
    "gl-legend": HTMLGlLegendElement;
  }
  interface ElementTagNameMap {
    "gl-legend": HTMLGlLegendElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      "gl-legend": JSXElements.GlLegendAttributes;
    }
  }
  namespace JSXElements {
    export interface GlLegendAttributes extends HTMLAttributes {
      
    }
  }
}


import {
  GLMap as GlMap
} from './components/gl-map/gl-map';

declare global {
  interface HTMLGlMapElement extends GlMap, HTMLStencilElement {
  }
  var HTMLGlMapElement: {
    prototype: HTMLGlMapElement;
    new (): HTMLGlMapElement;
  };
  interface HTMLElementTagNameMap {
    "gl-map": HTMLGlMapElement;
  }
  interface ElementTagNameMap {
    "gl-map": HTMLGlMapElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      "gl-map": JSXElements.GlMapAttributes;
    }
  }
  namespace JSXElements {
    export interface GlMapAttributes extends HTMLAttributes {
      latitude?: number;
      longitude?: number;
      maxzoom?: number;
      minzoom?: number;
      zoom?: number;
    }
  }
}


import {
  GLPanelToggle as GlPanelToggle
} from './components/gl-panel-toggle/gl-panel-toggle';

declare global {
  interface HTMLGlPanelToggleElement extends GlPanelToggle, HTMLStencilElement {
  }
  var HTMLGlPanelToggleElement: {
    prototype: HTMLGlPanelToggleElement;
    new (): HTMLGlPanelToggleElement;
  };
  interface HTMLElementTagNameMap {
    "gl-panel-toggle": HTMLGlPanelToggleElement;
  }
  interface ElementTagNameMap {
    "gl-panel-toggle": HTMLGlPanelToggleElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      "gl-panel-toggle": JSXElements.GlPanelToggleAttributes;
    }
  }
  namespace JSXElements {
    export interface GlPanelToggleAttributes extends HTMLAttributes {
      
    }
  }
}


import {
  GLStyle as GlStyle
} from './components/gl-style/gl-style';

declare global {
  interface HTMLGlStyleElement extends GlStyle, HTMLStencilElement {
  }
  var HTMLGlStyleElement: {
    prototype: HTMLGlStyleElement;
    new (): HTMLGlStyleElement;
  };
  interface HTMLElementTagNameMap {
    "gl-style": HTMLGlStyleElement;
  }
  interface ElementTagNameMap {
    "gl-style": HTMLGlStyleElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      "gl-style": JSXElements.GlStyleAttributes;
    }
  }
  namespace JSXElements {
    export interface GlStyleAttributes extends HTMLAttributes {
      url?: string;
    }
  }
}

declare global { namespace JSX { interface StencilJSX {} } }
